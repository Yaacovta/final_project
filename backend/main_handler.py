# import file_processor
from file_processor import extract_text, file_type_of_the_new_exercise
from api_handler import send_to_openai
from conversation_handler import initialize_conversation, add_message, get_conversation_history

import sys

# Enable UTF-8 encoding for Hebrew support
sys.stdout.reconfigure(encoding='utf-8')


def create_exercise(file_path: str, topic: str, due_date: str = "") -> str:

    # Extract text from the uploaded exercise file
    text_of_the_exercise = extract_text(file_path)

    # Initialize the conversation with the specified topic
    initialize_conversation(topic)

    # Add the original exercise content to the conversation history
    add_message("user", f"Topic: {topic}\nDue Date: {due_date}\n\n{text_of_the_exercise}")

    # Retrieve conversation history and generate a new exercise
    conversation_history = get_conversation_history()
    new_exercise = send_to_openai(conversation_history)

    # Add assistant's response to the conversation
    add_message("assistant", new_exercise)

    return new_exercise


def continue_conversation(user_input, topic):
    """
    Continues the conversation with a new user message and returns the updated exercise.

    Args:
        user_input (str): The message typed by the user in the chat.
        topic (str): The topic of the exercise (used for general context).

    Returns:
        str: A new exercise generated by OpenAI based on the updated conversation.
    """

    # Add the user's message to the conversation history
    add_message("user", user_input)

    # Retrieve the full conversation history and send it to OpenAI
    conversation = get_conversation_history()
    response = send_to_openai(conversation)

    # Add the assistant's response to the conversation history
    add_message("assistant", response)

    return response


def save_exercise_to_file(content: str, topic: str, file_type_code: str) -> str:
    """
    Saves the exercise content to a file (PDF or DOCX) based on the requested format.

    Args:
        content (str): The text content of the exercise to save.
        topic (str): The topic of the exercise (used as the filename base).
        file_type_code (str): 'P' for PDF or 'D' for DOCX.

    Returns:
        str: Path to the saved file, or an empty string if saving fails.
    """
    filename_base = f"{topic}_exercise"
    try:
        file_path = file_type_of_the_new_exercise(content, filename_base, file_type_code)
        return file_path
    except ValueError as e:
        print(f"Error saving file: {e}")
        return ""
